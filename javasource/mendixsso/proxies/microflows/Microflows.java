// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package mendixsso.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the MendixSSO module
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder authorizeRequestWithAccessTokenFromRequestBuilder(
		system.proxies.HttpRequest _httpRequest
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.AuthorizeRequestWithAccessTokenFromRequest");
		builder = builder.withParam("HttpRequest", _httpRequest);
		return builder;
	}

	public static system.proxies.User authorizeRequestWithAccessTokenFromRequest(
		IContext context,
		system.proxies.HttpRequest _httpRequest
	)
	{
		Object result = authorizeRequestWithAccessTokenFromRequestBuilder(
				_httpRequest
			)
			.execute(context);
		return result == null ? null : system.proxies.User.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder checkUserRolesRemovedBuilder(
		system.proxies.User _user
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.CheckUserRolesRemoved");
		builder = builder.withParam("User", _user);
		return builder;
	}

	public static boolean checkUserRolesRemoved(
		IContext context,
		system.proxies.User _user
	)
	{
		Object result = checkUserRolesRemovedBuilder(
				_user
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createAccessTokenAuthorizationHeaderListBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.CreateAccessTokenAuthorizationHeaderList");
		return builder;
	}

	public static java.util.List<system.proxies.HttpHeader> createAccessTokenAuthorizationHeaderList(IContext context)
	{
		Object result = createAccessTokenAuthorizationHeaderListBuilder().execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> system.proxies.HttpHeader.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createAccessTokenAuthorizationHeaderValueBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.CreateAccessTokenAuthorizationHeaderValue");
		return builder;
	}

	public static java.lang.String createAccessTokenAuthorizationHeaderValue(IContext context)
	{
		Object result = createAccessTokenAuthorizationHeaderValueBuilder().execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder decryptBuilder(
		java.lang.String _encrypted
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.Decrypt");
		builder = builder.withParam("Encrypted", _encrypted);
		return builder;
	}

	public static java.lang.String decrypt(
		IContext context,
		java.lang.String _encrypted
	)
	{
		Object result = decryptBuilder(
				_encrypted
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder encryptBuilder(
		java.lang.String _plain
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.Encrypt");
		builder = builder.withParam("Plain", _plain);
		return builder;
	}

	public static java.lang.String encrypt(
		IContext context,
		java.lang.String _plain
	)
	{
		Object result = encryptBuilder(
				_plain
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getEnvironmentPasswordBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetEnvironmentPassword");
		return builder;
	}

	public static java.lang.String getEnvironmentPassword(IContext context)
	{
		Object result = getEnvironmentPasswordBuilder().execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getEnvironmentUUIDBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetEnvironmentUUID");
		return builder;
	}

	public static java.lang.String getEnvironmentUUID(IContext context)
	{
		Object result = getEnvironmentUUIDBuilder().execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getLegacyOpenIDForSSOUserBuilder(
		system.proxies.User _user
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetLegacyOpenIDForSSOUser");
		builder = builder.withParam("User", _user);
		return builder;
	}

	public static java.lang.String getLegacyOpenIDForSSOUser(
		IContext context,
		system.proxies.User _user
	)
	{
		Object result = getLegacyOpenIDForSSOUserBuilder(
				_user
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getOpenIDConnectProviderBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetOpenIDConnectProvider");
		return builder;
	}

	public static java.lang.String getOpenIDConnectProvider(IContext context)
	{
		Object result = getOpenIDConnectProviderBuilder().execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getOpenIdConnectScopesBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetOpenIdConnectScopes");
		return builder;
	}

	public static java.lang.String getOpenIdConnectScopes(IContext context)
	{
		Object result = getOpenIdConnectScopesBuilder().execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getOpenIDPrefixBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetOpenIDPrefix");
		return builder;
	}

	public static java.lang.String getOpenIDPrefix(IContext context)
	{
		Object result = getOpenIDPrefixBuilder().execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getRolesLocationBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetRolesLocation");
		return builder;
	}

	public static java.lang.String getRolesLocation(IContext context)
	{
		Object result = getRolesLocationBuilder().execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getSignupHintBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetSignupHint");
		return builder;
	}

	public static java.lang.String getSignupHint(IContext context)
	{
		Object result = getSignupHintBuilder().execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getSilentAuthenticationBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetSilentAuthentication");
		return builder;
	}

	public static boolean getSilentAuthentication(IContext context)
	{
		Object result = getSilentAuthenticationBuilder().execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getUserProfileFromUserInfoEndpointBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetUserProfileFromUserInfoEndpoint");
		return builder;
	}

	public static mendixsso.proxies.UserProfile getUserProfileFromUserInfoEndpoint(IContext context)
	{
		Object result = getUserProfileFromUserInfoEndpointBuilder().execute(context);
		return result == null ? null : mendixsso.proxies.UserProfile.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getUUIDForSSOUserBuilder(
		system.proxies.User _user
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.GetUUIDForSSOUser");
		builder = builder.withParam("User", _user);
		return builder;
	}

	public static java.lang.String getUUIDForSSOUser(
		IContext context,
		system.proxies.User _user
	)
	{
		Object result = getUUIDForSSOUserBuilder(
				_user
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mendixSSO_AfterStartupBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.MendixSSO_AfterStartup");
		return builder;
	}

	public static boolean mendixSSO_AfterStartup(IContext context)
	{
		Object result = mendixSSO_AfterStartupBuilder().execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mendixSSO_CreateUserBuilder(
		mendixsso.proxies.UserProfile _userProfile,
		java.lang.String _uUID
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.MendixSSO_CreateUser");
		builder = builder.withParam("UserProfile", _userProfile);
		builder = builder.withParam("UUID", _uUID);
		return builder;
	}

	public static mendixsso.proxies.MendixSSOUser mendixSSO_CreateUser(
		IContext context,
		mendixsso.proxies.UserProfile _userProfile,
		java.lang.String _uUID
	)
	{
		Object result = mendixSSO_CreateUserBuilder(
				_userProfile,
				_uUID
			)
			.execute(context);
		return result == null ? null : mendixsso.proxies.MendixSSOUser.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mendixSSO_UpdateUserBuilder(
		mendixsso.proxies.MendixSSOUser _user,
		mendixsso.proxies.UserProfile _userProfile,
		java.lang.String _uUID
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.MendixSSO_UpdateUser");
		builder = builder.withParam("User", _user);
		builder = builder.withParam("UserProfile", _userProfile);
		builder = builder.withParam("UUID", _uUID);
		return builder;
	}

	public static mendixsso.proxies.MendixSSOUser mendixSSO_UpdateUser(
		IContext context,
		mendixsso.proxies.MendixSSOUser _user,
		mendixsso.proxies.UserProfile _userProfile,
		java.lang.String _uUID
	)
	{
		Object result = mendixSSO_UpdateUserBuilder(
				_user,
				_userProfile,
				_uUID
			)
			.execute(context);
		return result == null ? null : mendixsso.proxies.MendixSSOUser.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder refreshUserRolesBuilder(
		system.proxies.User _user,
		java.lang.String _userUUID
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.RefreshUserRoles");
		builder = builder.withParam("User", _user);
		builder = builder.withParam("UserUUID", _userUUID);
		return builder;
	}

	public static void refreshUserRoles(
		IContext context,
		system.proxies.User _user,
		java.lang.String _userUUID
	)
	{
		refreshUserRolesBuilder(
				_user,
				_userUUID
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder retrieveUserRolesBuilder(
		system.proxies.User _user,
		java.lang.String _userUUID
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.RetrieveUserRoles");
		builder = builder.withParam("User", _user);
		builder = builder.withParam("UserUUID", _userUUID);
		return builder;
	}

	public static boolean retrieveUserRoles(
		IContext context,
		system.proxies.User _user,
		java.lang.String _userUUID
	)
	{
		Object result = retrieveUserRolesBuilder(
				_user,
				_userUUID
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder rS_NotifyUserRolesChangedBuilder(
		java.lang.String _uUID
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.RS_NotifyUserRolesChanged");
		builder = builder.withParam("UUID", _uUID);
		return builder;
	}

	public static void rS_NotifyUserRolesChanged(
		IContext context,
		java.lang.String _uUID
	)
	{
		rS_NotifyUserRolesChangedBuilder(
				_uUID
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sE_DeleteExpiredAuthRequestsBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SE_DeleteExpiredAuthRequests");
		return builder;
	}

	public static void sE_DeleteExpiredAuthRequests(IContext context)
	{
		sE_DeleteExpiredAuthRequestsBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sE_DeleteExpiredTokensBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SE_DeleteExpiredTokens");
		return builder;
	}

	public static void sE_DeleteExpiredTokens(IContext context)
	{
		sE_DeleteExpiredTokensBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_AuthorizeRequestWithAccessTokenFromHeaderBuilder(
		java.lang.String _authorizationHeader
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_AuthorizeRequestWithAccessTokenFromHeader");
		builder = builder.withParam("AuthorizationHeader", _authorizationHeader);
		return builder;
	}

	public static system.proxies.User sUB_AuthorizeRequestWithAccessTokenFromHeader(
		IContext context,
		java.lang.String _authorizationHeader
	)
	{
		Object result = sUB_AuthorizeRequestWithAccessTokenFromHeaderBuilder(
				_authorizationHeader
			)
			.execute(context);
		return result == null ? null : system.proxies.User.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_DecryptTokenBuilder(
		mendixsso.proxies.Token _token
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_DecryptToken");
		builder = builder.withParam("Token", _token);
		return builder;
	}

	public static mendixsso.proxies.DecryptedToken sUB_DecryptToken(
		IContext context,
		mendixsso.proxies.Token _token
	)
	{
		Object result = sUB_DecryptTokenBuilder(
				_token
			)
			.execute(context);
		return result == null ? null : mendixsso.proxies.DecryptedToken.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetAccessTokenAndEnsureNotExpiresSoonBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetAccessTokenAndEnsureNotExpiresSoon");
		return builder;
	}

	public static mendixsso.proxies.DecryptedToken sUB_GetAccessTokenAndEnsureNotExpiresSoon(IContext context)
	{
		Object result = sUB_GetAccessTokenAndEnsureNotExpiresSoonBuilder().execute(context);
		return result == null ? null : mendixsso.proxies.DecryptedToken.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetCurrentAccessTokenBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetCurrentAccessToken");
		return builder;
	}

	public static mendixsso.proxies.DecryptedToken sUB_GetCurrentAccessToken(IContext context)
	{
		Object result = sUB_GetCurrentAccessTokenBuilder().execute(context);
		return result == null ? null : mendixsso.proxies.DecryptedToken.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetCurrentIdTokenBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetCurrentIdToken");
		return builder;
	}

	public static mendixsso.proxies.DecryptedToken sUB_GetCurrentIdToken(IContext context)
	{
		Object result = sUB_GetCurrentIdTokenBuilder().execute(context);
		return result == null ? null : mendixsso.proxies.DecryptedToken.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetCurrentMendixSSOUserBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetCurrentMendixSSOUser");
		return builder;
	}

	public static mendixsso.proxies.MendixSSOUser sUB_GetCurrentMendixSSOUser(IContext context)
	{
		Object result = sUB_GetCurrentMendixSSOUserBuilder().execute(context);
		return result == null ? null : mendixsso.proxies.MendixSSOUser.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetCurrentRefreshTokenBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetCurrentRefreshToken");
		return builder;
	}

	public static mendixsso.proxies.DecryptedToken sUB_GetCurrentRefreshToken(IContext context)
	{
		Object result = sUB_GetCurrentRefreshTokenBuilder().execute(context);
		return result == null ? null : mendixsso.proxies.DecryptedToken.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetDecryptedTokenByTypeForCurrentSessionBuilder(
		mendixsso.proxies.TokenType _tokenType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetDecryptedTokenByTypeForCurrentSession");
		builder = builder.withParam("TokenType", _tokenType == null ? null : _tokenType.name());
		return builder;
	}

	public static mendixsso.proxies.DecryptedToken sUB_GetDecryptedTokenByTypeForCurrentSession(
		IContext context,
		mendixsso.proxies.TokenType _tokenType
	)
	{
		Object result = sUB_GetDecryptedTokenByTypeForCurrentSessionBuilder(
				_tokenType
			)
			.execute(context);
		return result == null ? null : mendixsso.proxies.DecryptedToken.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetForeignIdentityBuilder(
		system.proxies.User _user
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetForeignIdentity");
		builder = builder.withParam("User", _user);
		return builder;
	}

	public static mendixsso.proxies.ForeignIdentity sUB_GetForeignIdentity(
		IContext context,
		system.proxies.User _user
	)
	{
		Object result = sUB_GetForeignIdentityBuilder(
				_user
			)
			.execute(context);
		return result == null ? null : mendixsso.proxies.ForeignIdentity.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetHttpHeaderValueBuilder(
		java.lang.String _headerName,
		system.proxies.HttpMessage _httpMessage
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetHttpHeaderValue");
		builder = builder.withParam("HeaderName", _headerName);
		builder = builder.withParam("HttpMessage", _httpMessage);
		return builder;
	}

	public static java.lang.String sUB_GetHttpHeaderValue(
		IContext context,
		java.lang.String _headerName,
		system.proxies.HttpMessage _httpMessage
	)
	{
		Object result = sUB_GetHttpHeaderValueBuilder(
				_headerName,
				_httpMessage
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetTokenByTypeForCurrentSessionBuilder(
		mendixsso.proxies.TokenType _tokenType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetTokenByTypeForCurrentSession");
		builder = builder.withParam("TokenType", _tokenType == null ? null : _tokenType.name());
		return builder;
	}

	public static mendixsso.proxies.Token sUB_GetTokenByTypeForCurrentSession(
		IContext context,
		mendixsso.proxies.TokenType _tokenType
	)
	{
		Object result = sUB_GetTokenByTypeForCurrentSessionBuilder(
				_tokenType
			)
			.execute(context);
		return result == null ? null : mendixsso.proxies.Token.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetUserInfoFromIdentityProviderBuilder(
		java.lang.String _accessToken
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetUserInfoFromIdentityProvider");
		builder = builder.withParam("AccessToken", _accessToken);
		return builder;
	}

	public static java.lang.String sUB_GetUserInfoFromIdentityProvider(
		IContext context,
		java.lang.String _accessToken
	)
	{
		Object result = sUB_GetUserInfoFromIdentityProviderBuilder(
				_accessToken
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_GetUUIDFromOpenIdBuilder(
		java.lang.String _openId
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_GetUUIDFromOpenId");
		builder = builder.withParam("OpenId", _openId);
		return builder;
	}

	public static java.lang.String sUB_GetUUIDFromOpenId(
		IContext context,
		java.lang.String _openId
	)
	{
		Object result = sUB_GetUUIDFromOpenIdBuilder(
				_openId
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_RefreshTokensBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_RefreshTokens");
		return builder;
	}

	public static mendixsso.proxies.Response sUB_RefreshTokens(IContext context)
	{
		Object result = sUB_RefreshTokensBuilder().execute(context);
		return result == null ? null : mendixsso.proxies.Response.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_ReplaceRenewedTokenBuilder(
		java.lang.String _tokenValue,
		mendixsso.proxies.TokenType _tokenType,
		java.lang.Long _expiresIn
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_ReplaceRenewedToken");
		builder = builder.withParam("TokenValue", _tokenValue);
		builder = builder.withParam("TokenType", _tokenType == null ? null : _tokenType.name());
		builder = builder.withParam("ExpiresIn", _expiresIn);
		return builder;
	}

	public static void sUB_ReplaceRenewedToken(
		IContext context,
		java.lang.String _tokenValue,
		mendixsso.proxies.TokenType _tokenType,
		java.lang.Long _expiresIn
	)
	{
		sUB_ReplaceRenewedTokenBuilder(
				_tokenValue,
				_tokenType,
				_expiresIn
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_ValidateHeaderAndReturnAccessTokenBuilder(
		java.lang.String _authorizationHeader
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MendixSSO.SUB_ValidateHeaderAndReturnAccessToken");
		builder = builder.withParam("AuthorizationHeader", _authorizationHeader);
		return builder;
	}

	public static java.lang.String sUB_ValidateHeaderAndReturnAccessToken(
		IContext context,
		java.lang.String _authorizationHeader
	)
	{
		Object result = sUB_ValidateHeaderAndReturnAccessTokenBuilder(
				_authorizationHeader
			)
			.execute(context);
		return (java.lang.String) result;
	}
}
