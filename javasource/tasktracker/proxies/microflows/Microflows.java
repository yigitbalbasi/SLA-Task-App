// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package tasktracker.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the TaskTracker module
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder afterStartUpBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.AfterStartUp");
		return builder;
	}

	public static boolean afterStartUp(IContext context)
	{
		Object result = afterStartUpBuilder().execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder assignTaskToMeBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.AssignTaskToMe");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void assignTaskToMe(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		assignTaskToMeBuilder(
				_task
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createNewCommentBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.CreateNewComment");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static tasktracker.proxies.CommentHelper createNewComment(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		Object result = createNewCommentBuilder(
				_task
			)
			.execute(context);
		return result == null ? null : tasktracker.proxies.CommentHelper.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createNewFileBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.CreateNewFile");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static tasktracker.proxies.FileUpload createNewFile(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		Object result = createNewFileBuilder(
				_task
			)
			.execute(context);
		return result == null ? null : tasktracker.proxies.FileUpload.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder createNewTaskBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.CreateNewTask");
		return builder;
	}

	public static void createNewTask(IContext context)
	{
		createNewTaskBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder downloadFileBuilder(
		tasktracker.proxies.FileUpload _fileUpload
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.DownloadFile");
		builder = builder.withParam("FileUpload", _fileUpload);
		return builder;
	}

	public static void downloadFile(
		IContext context,
		tasktracker.proxies.FileUpload _fileUpload
	)
	{
		downloadFileBuilder(
				_fileUpload
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getCurrentMendixSSOUserBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.GetCurrentMendixSSOUser");
		return builder;
	}

	public static mendixsso.proxies.MendixSSOUser getCurrentMendixSSOUser(IContext context)
	{
		Object result = getCurrentMendixSSOUserBuilder().execute(context);
		return result == null ? null : mendixsso.proxies.MendixSSOUser.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder postCommentBuilder(
		tasktracker.proxies.CommentHelper _commentHelper,
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.PostComment");
		builder = builder.withParam("CommentHelper", _commentHelper);
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void postComment(
		IContext context,
		tasktracker.proxies.CommentHelper _commentHelper,
		tasktracker.proxies.Task _task
	)
	{
		postCommentBuilder(
				_commentHelper,
				_task
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder retrieveCommentsBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.RetrieveComments");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static java.util.List<tasktracker.proxies.Comment> retrieveComments(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		Object result = retrieveCommentsBuilder(
				_task
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> tasktracker.proxies.Comment.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder retrieveFilesBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.RetrieveFiles");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static java.util.List<tasktracker.proxies.FileUpload> retrieveFiles(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		Object result = retrieveFilesBuilder(
				_task
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> tasktracker.proxies.FileUpload.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder saveTaskBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.SaveTask");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void saveTask(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		saveTaskBuilder(
				_task
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder selectDoneStatusBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.SelectDoneStatus");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void selectDoneStatus(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		selectDoneStatusBuilder(
				_task
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder selectHighPriorityBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.SelectHighPriority");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void selectHighPriority(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		selectHighPriorityBuilder(
				_task
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder selectInProgressStatusBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.SelectInProgressStatus");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void selectInProgressStatus(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		selectInProgressStatusBuilder(
				_task
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder selectLowPriorityBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.SelectLowPriority");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void selectLowPriority(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		selectLowPriorityBuilder(
				_task
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder selectMediumPriorityBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.SelectMediumPriority");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void selectMediumPriority(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		selectMediumPriorityBuilder(
				_task
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder selectReviewStatusBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.SelectReviewStatus");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void selectReviewStatus(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		selectReviewStatusBuilder(
				_task
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder selectToDoStatusBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.SelectToDoStatus");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void selectToDoStatus(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		selectToDoStatusBuilder(
				_task
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder showMyProfileBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.ShowMyProfile");
		return builder;
	}

	public static void showMyProfile(IContext context)
	{
		showMyProfileBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_ValidationTaskBuilder(
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.SUB_ValidationTask");
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static boolean sUB_ValidationTask(
		IContext context,
		tasktracker.proxies.Task _task
	)
	{
		Object result = sUB_ValidationTaskBuilder(
				_task
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder updateOpenTasksCountBuilder(
		mendixsso.proxies.MendixSSOUser _mendixSSOUser
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.UpdateOpenTasksCount");
		builder = builder.withParam("MendixSSOUser", _mendixSSOUser);
		return builder;
	}

	public static tasktracker.proxies.PageHelper updateOpenTasksCount(
		IContext context,
		mendixsso.proxies.MendixSSOUser _mendixSSOUser
	)
	{
		Object result = updateOpenTasksCountBuilder(
				_mendixSSOUser
			)
			.execute(context);
		return result == null ? null : tasktracker.proxies.PageHelper.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder updateTeamProgressBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.UpdateTeamProgress");
		return builder;
	}

	public static tasktracker.proxies.PageHelper updateTeamProgress(IContext context)
	{
		Object result = updateTeamProgressBuilder().execute(context);
		return result == null ? null : tasktracker.proxies.PageHelper.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder uploadFileBuilder(
		tasktracker.proxies.FileUpload _fileUpload,
		tasktracker.proxies.Task _task
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("TaskTracker.UploadFile");
		builder = builder.withParam("FileUpload", _fileUpload);
		builder = builder.withParam("Task", _task);
		return builder;
	}

	public static void uploadFile(
		IContext context,
		tasktracker.proxies.FileUpload _fileUpload,
		tasktracker.proxies.Task _task
	)
	{
		uploadFileBuilder(
				_fileUpload,
				_task
			)
			.execute(context);
	}
}
